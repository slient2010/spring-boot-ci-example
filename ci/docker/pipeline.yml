---
resources:
- name: spring-boot-ci-example
  type: git
  source:
    branch: stable
    uri: https://github.com/slient2010/spring-boot-ci-example.git
    username: ((gitusername))
    password: ((gitpass))


- name: build-docker-image
  type: docker-image
  source:
    email: ((email))
    username: ((username))
    password: ((password))
    repository: ((repo))/public/spring-boot-ci-example

# 构建任务
jobs:
- name: Build
  # 是否公开可见任务
  public: true
  plan:
    - get: spring-boot-ci-example
      # passed: [Unit Tests]
      trigger: true
    # 具体构建任务
    - task: Build Code
      file: spring-boot-ci-example/ci/task-build.yml
      # config:
      #   platform: linux
      #   image_resource:
      #     type: docker-image
      #     source: 
      #       repository: dev-harbor.teyixing.com/public/gradle
      #       tag: 6.3.0-jdk11
      #   inputs:
      #     - name: spring-boot-ci-example
      #   # 输出目录
      #   outputs:
      #     - name: docker-builds-binaries

      #   run:
      #     path: /bin/bash
      #     args:
      #     - -c
      #     - |
      #       output_dir=docker-builds-binaries
      #       ls .
      #       cd spring-boot-ci-example
      #       gradle clean assemble
      #       cat << EOF > "../${output_dir}/Dockerfile"
      #       FROM dev-harbor.teyixing.com/public/java:11.0.3
      #       ADD ${outputs_dir}/libs/spring-boot-ci-example-0.0.1-SNAPSHOT.jar /spring-boot-ci-example-0.0.1-SNAPSHOT.jar
      #       ENTRYPOINT ["java", "-Djava.awt.headless=true", "-D-Xmx256m","-jar","/spring-boot-ci-example-0.0.1-SNAPSHOT.jar"]
      #       EOF
      #       cp -R ./build/libs/  "../${output_dir}"
      #       ls "../${output_dir}"

    # 创建镜像
    - put: build-docker-image
      params:
        build: docker-builds-binaries
